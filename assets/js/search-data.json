{
  
    
        "post0": {
            "title": "Title",
            "content": ". &#48152;&#48373;&#47928; . for &#44396;&#51312; . for i in [1,2,3,4,5]: print(i) . 1 2 3 4 5 . for i in &#39;python&#39;: print(i) . p y t h o n . for i in range(5): print(i) . 0 1 2 3 4 . for i in range(5): print(i,end= &quot; &quot;) #end=&quot; &quot;와 같이 공백을 지정하면 줄이 바뀌지 않고 공백만큼의 간격으로 출력 . 0 1 2 3 4 . for i in range(1,6): print(i,end= &quot;&quot;) #end=&quot;&quot;는 가로로 출력 . 12345 . for i in range(1,10,2): print(i,end= &quot;,&quot;) . 1,3,5,7,9, . for i in range(1,10,-1): print(i,end= &quot; &quot;) . for i in range(10,0,-1): print(i,end= &quot; t&quot;) #&quot; t&quot;은 탭 간격으로 출력 . 10 9 8 7 6 5 4 3 2 1 . for i in range(10): #range(횟수)만큼 반복된다. print(&#39;Hello World!!&#39;) . Hello World!! Hello World!! Hello World!! Hello World!! Hello World!! Hello World!! Hello World!! Hello World!! Hello World!! Hello World!! . while . while + 조건식:&lt;/br&gt; 조건식의 결과가 True인 동안 반복된다.&lt;/br&gt; 반복을 마치기 위해서는 False 결과가 나와야 한다. . i = 1 #루프의 조건식에 사용되는 변수는 루프에 들어가기 전에 초기화되어야 한다. while i &lt;= 5: print(i, end= &#39; &#39;) i = i + 1 #루프의 조건식에 사용되는 변수 값은 루프 내에서 변경되어야 한다. . 1 2 3 4 5 . for i in range(1,6): print(i,end=&#39; &#39;) . 1 2 3 4 5 . i = 1 while i &lt;= 5: i = i + 1 print(i, end= &#39; &#39;) . 2 3 4 5 6 . i = 0 while i &lt;= 5: i = i + 1 print(i, end= &#39; &#39;) . 1 2 3 4 5 6 . 무한루프일때 ctrl+ m i으로 실행 멈출 수 있음. . i = 1 while i &lt;= 5: # i값이 계속 1이므로 무한루프 -&gt; 계속해서 &#39;1&#39;값 출력 print(i) print(&#39;end&#39;) . #&#39;q&#39;를 입력할때까지 반복하여 이름을 입력받는 프로그램을 작성하시오. name = &#39; &#39; while name != &#39;q&#39;: name = input(&#39;이름을 입력하세요:&#39;) print(name) . 이름을 입력하세요:미미 미미 이름을 입력하세요:지호 지호 이름을 입력하세요:q q . name = &#39; &#39; while name != &#39;q&#39;: name = input(&#39;이름을 입력하세요:&#39;) if name != &#39;q&#39;: #q일때는 이름 출력 안한다. print(name) . 이름을 입력하세요:a a 이름을 입력하세요:b b 이름을 입력하세요:c c 이름을 입력하세요:q . cnum1 = 0 sum1 = 0 while num1 != 99: num1 = int(input(&#39;숫자를 입력하세요:&#39;)) sum1 += num1 print(sum1) . 숫자를 입력하세요:10 10 숫자를 입력하세요:20 30 숫자를 입력하세요:50 80 숫자를 입력하세요:99 179 . #5개의 정수를 입력받아 합계를 구하여 출력하는 프로그램 작성 #for문 이용 sum = 0 #합계 초기화 for i in range(5): #5번 반복 num = int(input(&#39;정수를 입력하세요:&#39;)) #입력 sum += num #입력한 정수를 합계에 누적하여 더하기 print(&#39;합계출력:&#39;,sum) #합계 출력 . 정수를 입력하세요:3 정수를 입력하세요:7 정수를 입력하세요:20 정수를 입력하세요:345 정수를 입력하세요:13 합계출력: 388 . #5개의 정수를 입력받아 합계를 구하여 출력하는 프로그램 작성 #while문 이용 sum = 0 i=1 while i &lt;= 5: i += 1 num = int(input(&#39;정수를 입력하세요:&#39;)) sum += num print(&#39;합계출력:&#39;,sum) . 정수를 입력하세요:35 정수를 입력하세요:56 정수를 입력하세요:53 정수를 입력하세요:32 정수를 입력하세요:34 합계출력: 210 . #사용자로부터 n을 입력받고 n개의 정수를 입력받아 합계를 구하여 출력하는 프로그램 작성 n= int(input(&#39;몇개의 숫자를 더할까요?:&#39;)) #반복횟수 n 입력 sum1 = 0 #합계 초기화 for i in range(n): #n번 반복 num = int(input(&#39;정수를 입력하세요:&#39;)) #입력 sum1 += num print(&#39;합계:&#39;,sum1) . 몇개의 숫자를 더할까요?:5 정수를 입력하세요:1 정수를 입력하세요:2 정수를 입력하세요:3 정수를 입력하세요:4 정수를 입력하세요:5 합계: 15 . #사용자로부터 n을 입력받고 n개의 정수를 입력받아 짝수의 합계를 구하여 출력하는 프로그램 작성 n=int(input(&#39;몇개의 숫자를 더할까요?:&#39;)) sum1 = 0 for i in range(n): num = int(input(&#39;정수를 입력하세요:&#39;)) if num % 2 == 0: sum1 += num print(&#39;합계출력:&#39;, sum1) . 몇개의 숫자를 더할까요?:5 정수를 입력하세요:2 정수를 입력하세요:3 정수를 입력하세요:4 정수를 입력하세요:5 정수를 입력하세요:6 합계출력: 12 . #0이 입력될때까지 사용자가 숫자를 입력하고, 입력이 끝나면 입력된 숫자들의 합이 출력되는 프로그램 작성 sum1 = 0 num = &#39; &#39; #초기값을 줘야 오류발생 X num = int(input(&#39;숫자:&#39;)) while num != 0: sum1 += num num = int(input(&#39;숫자:&#39;)) print(&#39;합계출력:&#39;,sum1) . 숫자:4 숫자:6 숫자:3 숫자:5 숫자:0 합계출력: 18 . #0이 입력될때까지 사용자가 숫자를 입력하고, 입력이 끝나면 입력된 숫자들의 합이 출력되는 프로그램 작성 sum1 = 0 chk = 1 while num1!=0 or chk == 1: num1 = int(input(&quot;숫자:&quot;)) sum1 += num1 if chk == 1: chk = 1 + chk print(&#39;합계:&#39;,sum1) print(chk) . 숫자:23 숫자:3 숫자:1 숫자:23 숫자:0 합계: 50 2 . # 숫자 n을 입력받아 1~n까지의 합을 구하여 출력하는 파이썬 프로그램을 작성하세요 sum1 = 0 n = int(input(&#39;1부터 몇까지 더할까요?:&#39;)) for i in range(1,n+1): sum1 += i print(f&#39;1부터 {n}까지 더한 합계는:&#39;,sum1) . 1부터 몇까지 더할까요?:10 1부터 10까지 더한 합계는: 55 . # 숫자 n을 입력받아 1~n까지의 합을 구하여 출력하는 파이썬 프로그램을 작성하세요 sum1 = 0 n = int(input(&#39;1부터 몇까지 더할까요?:&#39;)) i=1 while i &lt;= n: sum1 += i i += 1 print(f&#39;1부터 {n}까지 더한 합계는:&#39;,sum1) . 1부터 몇까지 더할까요?:5 1부터 5까지 더한 합계는: 15 . # 숫자 n1, n2를 입력받아 n1~n2까지의 합을 구하여 출력하는 파이썬 프로그램을 작성하세요 sum1 = 0 n1 = int(input(&#39;몇부터 더할까요?:&#39;)) n2 = int(input(&#39;몇부터 더할까요?:&#39;)) for i in range(n1, n2+1): sum1 += i print(f&#39;{n1}부터 {n2}까지 더한 합계는:&#39;, sum1) . 몇부터 더할까요?:1 몇부터 더할까요?:5 1부터 5까지 더한 합계는: 15 . #사용자에게 n개의 숫자를 입력받아 그 숫자들의 평균을 계산해서 출력하는 파이썬 프로그램을 작성하세요. #프로그램 실행 초반에 사용자가 입력할 숫자의 개수를 입력 받습니다. n=int(input(&#39;입력받을 정수의 개수:&#39;)) sum1 = 0 for i in range(n): num = int(input(&#39;숫자:&#39;)) sum1 += num if n == 0: print(&#39;0개의 정수를 입력하셨습니다.&#39;) else: print(&#39;평균:&#39;, sum1/n) . 입력받을 정수의 개수:3 숫자:2 숫자:4 숫자:6 평균: 4.0 . #정수 n을 입력받아 n!을 계산하는 프로그램 작성 n= int(input(&#39;몇 팩토리얼?:&#39;)) factorial = 1 for i in range(n,0,-1): factorial *= i print(f&#39;{n}! = {factorial}&#39;) . 몇 팩토리얼?:4 4! = 24 . #정수 n을 입력받아 해당 구구단을 계산하는 프로그램을 작성하세요. n= int(input(&#39;구구단 몇단을 출력할까요?:&#39;)) for i in range(1,10): print(f&#39;{n} * {i} = {n*i}&#39;) . 구구단 몇단을 출력할까요?:6 6 * 1 = 6 6 * 2 = 12 6 * 3 = 18 6 * 4 = 24 6 * 5 = 30 6 * 6 = 36 6 * 7 = 42 6 * 8 = 48 6 * 9 = 54 . &#51473;&#52393;&#48152;&#48373;&#44396;&#51312; . for i in range(5): #내부 루프와 외부루프는 동일한 제어변수를 사용해서는 안된다.(ex.i,j) for j in range(3): #내부 for문을 외부 for문의 시퀀스만큼 반복한다. print(i,j) . 0 0 0 1 0 2 1 0 1 1 1 2 2 0 2 1 2 2 3 0 3 1 3 2 4 0 4 1 4 2 . for i in range(2,10): for j in range(1,10): print(f&#39;{i} * {j} = {i*j}&#39;, end=&#39; t&#39;) print() . 2 * 1 = 2 2 * 2 = 4 2 * 3 = 6 2 * 4 = 8 2 * 5 = 10 2 * 6 = 12 2 * 7 = 14 2 * 8 = 16 2 * 9 = 18 3 * 1 = 3 3 * 2 = 6 3 * 3 = 9 3 * 4 = 12 3 * 5 = 15 3 * 6 = 18 3 * 7 = 21 3 * 8 = 24 3 * 9 = 27 4 * 1 = 4 4 * 2 = 8 4 * 3 = 12 4 * 4 = 16 4 * 5 = 20 4 * 6 = 24 4 * 7 = 28 4 * 8 = 32 4 * 9 = 36 5 * 1 = 5 5 * 2 = 10 5 * 3 = 15 5 * 4 = 20 5 * 5 = 25 5 * 6 = 30 5 * 7 = 35 5 * 8 = 40 5 * 9 = 45 6 * 1 = 6 6 * 2 = 12 6 * 3 = 18 6 * 4 = 24 6 * 5 = 30 6 * 6 = 36 6 * 7 = 42 6 * 8 = 48 6 * 9 = 54 7 * 1 = 7 7 * 2 = 14 7 * 3 = 21 7 * 4 = 28 7 * 5 = 35 7 * 6 = 42 7 * 7 = 49 7 * 8 = 56 7 * 9 = 63 8 * 1 = 8 8 * 2 = 16 8 * 3 = 24 8 * 4 = 32 8 * 5 = 40 8 * 6 = 48 8 * 7 = 56 8 * 8 = 64 8 * 9 = 72 9 * 1 = 9 9 * 2 = 18 9 * 3 = 27 9 * 4 = 36 9 * 5 = 45 9 * 6 = 54 9 * 7 = 63 9 * 8 = 72 9 * 9 = 81 . for i in range(1,10): for j in range(2,10): print(f&#39;{j} * {i} = {i*j}&#39;, end=&#39; t&#39;) print() . 2 * 1 = 2 3 * 1 = 3 4 * 1 = 4 5 * 1 = 5 6 * 1 = 6 7 * 1 = 7 8 * 1 = 8 9 * 1 = 9 2 * 2 = 4 3 * 2 = 6 4 * 2 = 8 5 * 2 = 10 6 * 2 = 12 7 * 2 = 14 8 * 2 = 16 9 * 2 = 18 2 * 3 = 6 3 * 3 = 9 4 * 3 = 12 5 * 3 = 15 6 * 3 = 18 7 * 3 = 21 8 * 3 = 24 9 * 3 = 27 2 * 4 = 8 3 * 4 = 12 4 * 4 = 16 5 * 4 = 20 6 * 4 = 24 7 * 4 = 28 8 * 4 = 32 9 * 4 = 36 2 * 5 = 10 3 * 5 = 15 4 * 5 = 20 5 * 5 = 25 6 * 5 = 30 7 * 5 = 35 8 * 5 = 40 9 * 5 = 45 2 * 6 = 12 3 * 6 = 18 4 * 6 = 24 5 * 6 = 30 6 * 6 = 36 7 * 6 = 42 8 * 6 = 48 9 * 6 = 54 2 * 7 = 14 3 * 7 = 21 4 * 7 = 28 5 * 7 = 35 6 * 7 = 42 7 * 7 = 49 8 * 7 = 56 9 * 7 = 63 2 * 8 = 16 3 * 8 = 24 4 * 8 = 32 5 * 8 = 40 6 * 8 = 48 7 * 8 = 56 8 * 8 = 64 9 * 8 = 72 2 * 9 = 18 3 * 9 = 27 4 * 9 = 36 5 * 9 = 45 6 * 9 = 54 7 * 9 = 63 8 * 9 = 72 9 * 9 = 81 . &#48152;&#48373;&#47928; &#48279;&#50612;&#45208;&#44592; Break . t = &#39;I have a dream&#39; letter = input(&#39;찾을 문자:&#39;) for i in t: print(i, end=&quot; &quot;) if i == letter: break . 찾을 문자:a I h a . &#50696;&#51228; &gt; up &amp; down &#44172;&#51076; . 1~100 사이의 정답숫자를 랜덤으로 하나 정하고 정답숫자를 맞출 때까지 숫자를 입력하는 게임이다.&lt;/br&gt; 내가 입력한 숫자가 정답보다 작으면 &#39;DOWN&#39;을, 정답보다 크면 &#39;UP&#39;을 출력하고 숫자를 다시 입력받는다.&lt;/br&gt; 정답을 맞추면 &#39;정답!&#39;이라고 출력하고 게임을 끝낸다.&lt;/br&gt; . import random n = random.randint(1,100) answer = int(input(&#39;예상 숫자:&#39;)) while n != answer: if answer &gt; n: print(&#39;DOWN&#39;) answer = int(input(&#39;예상 숫자:&#39;)) elif answer &lt; n: print(&#39;UP&#39;) answer = int(input(&#39;예상 숫자:&#39;)) print(&#39;정답!&#39;) print(f&#39;정답은 {n}였습니다.&#39;) . 예상 숫자:35 UP 예상 숫자:50 UP 예상 숫자:45 UP 예상 숫자:70 DOWN 예상 숫자:65 DOWN 예상 숫자:60 DOWN 예상 숫자:58 DOWN 예상 숫자:57 DOWN 예상 숫자:55 DOWN 예상 숫자:53 DOWN 예상 숫자:52 DOWN 예상 숫자:51 정답! 정답은 51였습니다. .",
            "url": "https://seungeun-lee99.github.io/dtpythonblog/2021/06/06/_4%ED%8C%80_%EC%9D%B4%EC%8A%B9%EC%9D%80.html",
            "relUrl": "/2021/06/06/_4%ED%8C%80_%EC%9D%B4%EC%8A%B9%EC%9D%80.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://seungeun-lee99.github.io/dtpythonblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://seungeun-lee99.github.io/dtpythonblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://seungeun-lee99.github.io/dtpythonblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://seungeun-lee99.github.io/dtpythonblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}